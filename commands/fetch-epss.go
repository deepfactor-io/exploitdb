package commands

import (
	"time"

	"github.com/inconshreveable/log15"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"golang.org/x/xerrors"

	"github.com/deepfactor-io/exploitdb/db"
	"github.com/deepfactor-io/exploitdb/fetcher"
	"github.com/deepfactor-io/exploitdb/models"
	"github.com/deepfactor-io/exploitdb/util"
)

var fetchEPSSMetaCmd = &cobra.Command{
	Use:   "epss",
	Short: "Fetch epss meta",
	Long:  `Fetch epss meta`,
	RunE:  fetchEPSSMeta,
}

func init() {
	fetchCmd.AddCommand(fetchEPSSMetaCmd)
}

func fetchEPSSMeta(_ *cobra.Command, _ []string) (err error) {
	if err := util.SetLogger(viper.GetBool("log-to-file"), viper.GetString("log-dir"), viper.GetBool("debug"), viper.GetBool("log-json")); err != nil {
		return xerrors.Errorf("Failed to SetLogger. err: %w", err)
	}

	driver, err := db.NewDB(viper.GetString("dbtype"), viper.GetString("dbpath"), viper.GetBool("debug-sql"), db.Option{})
	if err != nil {
		if xerrors.Is(err, db.ErrDBLocked) {
			return xerrors.Errorf("Failed to open DB. Close DB connection before fetching. err: %w", err)
		}
		return xerrors.Errorf("Failed to open DB. err: %w", err)
	}

	fetchMeta, err := driver.GetFetchMeta()
	if err != nil {
		return xerrors.Errorf("Failed to get FetchMeta from DB. err: %w", err)
	}

	// If the fetch fails the first time (without SchemaVersion), the DB needs to be cleaned every time, so insert SchemaVersion.
	if err := driver.UpsertFetchMeta(fetchMeta); err != nil {
		return xerrors.Errorf("Failed to upsert FetchMeta to DB. dbpath: %s, err: %w", viper.GetString("dbpath"), err)
	}

	log15.Info("Fetching EPSS Meta")
	var epss []models.EPSSMeta
	if epss, err = fetcher.FetchEPSSMeta(); err != nil {
		return xerrors.Errorf("Failed to fetch EPSS. err: %w", err)
	}
	log15.Info("EPSS Meta", "count", len(epss))

	log15.Info("Insert Exploit into go-exploitdb.", "db", driver.Name())
	if err := driver.InsertExploit(models.EPSS, nil, epss); err != nil {
		return xerrors.Errorf("Failed to insert. dbpath: %s, err: %w", viper.GetString("dbpath"), err)
	}

	fetchMeta.LastFetchedAt = time.Now()
	if err := driver.UpsertFetchMeta(fetchMeta); err != nil {
		return xerrors.Errorf("Failed to upsert FetchMeta to DB. dbpath: %s, err: %w", viper.GetString("dbpath"), err)
	}

	return nil
}
