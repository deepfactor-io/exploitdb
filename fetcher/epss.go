package fetcher

import (
	"compress/gzip"
	"encoding/csv"
	"errors"
	"strconv"

	"github.com/deepfactor-io/exploitdb/models"
	"github.com/deepfactor-io/exploitdb/util"
)

const epssURL string = "https://epss.cyentia.com/epss_scores-current.csv.gz"

/*
epssMeta : epss meta data
*/
type epssMeta struct {
	CVEID      string  `json:"cve"`
	Score      float64 `json:"epss"`
	Percentile float64 `json:"percentile"`
}

// FetchEPSSMeta : download epss metadata and process it
func FetchEPSSMeta() (epss []models.EPSSMeta, err error) {
	resp, _, err := util.FetchURL(epssURL)
	if err != nil {
		return nil, err
	}

	zipReader, err := gzip.NewReader(resp.Body)
	if err != nil {
		return nil, err
	}
	defer zipReader.Close()

	if zipReader == nil {
		return nil, errors.New("no epss data available")
	}

	csvReader := csv.NewReader(zipReader)
	csvReader.Comment = '#'
	data, err := csvReader.ReadAll()
	if err != nil {
		return nil, err
	}

	for i, line := range data {
		// Skip first line of csv
		if i == 0 {
			continue
		}
		var rec epssMeta
		for j, field := range line {
			switch j {
			case 0:
				rec.CVEID = field
			case 1:
				rec.Score, _ = strconv.ParseFloat(field, 64)
			case 2:
				rec.Percentile, _ = strconv.ParseFloat(field, 64)
			}
		}

		if len(rec.CVEID) == 0 {
			continue
		}

		epss = append(epss, models.EPSSMeta{
			CveID:      rec.CVEID,
			Score:      rec.Score,
			Percentile: rec.Percentile,
		})
	}

	return epss, nil
}
